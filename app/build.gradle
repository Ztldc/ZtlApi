apply plugin: 'com.android.library'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        //javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }

       // testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            // 设置支持的SO库架构 解决64位so方法
            abiFilters 'armeabi', 'armeabi-v7a'
        }
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建
    lintOptions {
        abortOnError false
    }

    //混淆代码
   /* buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true  // Zipalign优化
            //shrinkResources true // 移除无用的resource文件,必须和minifyEnabled 一起使用
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            zipAlignEnabled false  // Zipalign优化
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }*/

    //以下是为了找到android.os.SystemProperties这个隐藏的类
    String SDK_DIR = System.getenv("ANDROID_SDK_HOME")
    //("TAG", "SDK_DIR = " + SDK_DIR );
    if(SDK_DIR == null) {
        Properties props = new Properties()
        props.load(new FileInputStream(project.rootProject.file("local.properties")))
        SDK_DIR = props.get('sdk.dir');
    }
    dependencies {
        provided files("${SDK_DIR}/platforms/android-22/data/layoutlib.jar")
    }
    //以上是为了找到android.os.SystemProperties这个隐藏的类

//
//    // 将 .so 文件打包为 Native_Libs.jar 包文件
//    task nativeLibsToJar(type: Zip, description: "create a jar archive of the native libs") {
//        destinationDir file("../prebuild")
//        baseName "ZtlI2C"
//        extension "jar"
//        from fileTree(dir: "src/main/jniLibs", include: "**/*.so")
//        into "lib"
//    }
//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn(nativeLibsToJar)
//    }
//
//    sourceSets.main{
//        jniLibs.srcDirs = ['../prebuild'];
//    }

    // 将 .so 文件打包为 Native_Libs.jar 包文件
//    task nativeLibsToJar(type: Zip, description: "create a jar archive of the native libs") {
//        destinationDir file('../prebuild')
//        baseName "Native_Libs2"
//        extension "jar"
//        from fileTree(dir: "src/main/jniLibs", include: "**/*.so")
//        into "lib"
//    }
//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn(nativeLibsToJar)
//    }
//
//    sourceSets.main{
//        jniLibs.srcDirs = ['../prebuild'];
//    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

//生成jar包
task makeJar(type: Jar) {
    //生成的jar的名称
    getArchiveFileName().set( 'ZtlApi.jar')
    //from fileTree(dir: "src/main/jniLibs", include: "**/*.so")

    //需要合并的jar的路径+名称
    //from(project.zipTree('build/intermediates/compile_library_classes/debug/classes.jar'))
    //from(project.zipTree('build/intermediates/aar_main_jar/release/classes.jar')) //混淆的jar
    //from fileTree(dir: "src/main/jniLibs", include: "**/*.so")
    from(project.zipTree('build/intermediates/aar_main_jar/debug/classes.jar'))

    //输出到的位置
    //getDestinationDirectory().set(file('build/lib'))\TestAPI\libs
    getDestinationDirectory().set(file('../prebuild'))  //这里输出位置直接替换掉正在使用的jar

}

makeJar.dependsOn(build)